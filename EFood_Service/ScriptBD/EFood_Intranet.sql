DROP TABLE IF EXISTS BITACORA;
DROP TABLE IF EXISTS CARRITO;
DROP TABLE IF EXISTS CONSECUTIVO;
DROP TABLE IF EXISTS ERROR;
DROP TABLE IF EXISTS PEDIDO;
DROP TABLE IF EXISTS DESCUENTO;
DROP TABLE IF EXISTS PRECIO;
DROP TABLE IF EXISTS PRODUCTO;
DROP TABLE IF EXISTS ROL;
DROP TABLE IF EXISTS ADMINISTRADOR;
DROP TABLE IF EXISTS PREGUNTA;
DROP TABLE IF EXISTS TARJETA_PROCESADOR;
DROP TABLE IF EXISTS PROCESADOR_PAGO;
DROP TABLE IF EXISTS TIPO_CONSECUTIVOS;
DROP TABLE IF EXISTS TIPO_ESTADO;
DROP TABLE IF EXISTS TIPO_LINEA;
DROP TABLE IF EXISTS TIPO_PAGO;
DROP TABLE IF EXISTS TIPO_PRECIO;
DROP TABLE IF EXISTS TIPO_TARJETA;

CREATE TABLE ERROR
(
    CODE INTEGER IDENTITY (1, 1)
    ,
    FECHA DATETIME DEFAULT GETDATE()
    ,
    ERROR INTEGER
    ,
    MENSAJE NVARCHAR(200)
    ,
    CONSTRAINT PK_ERROR_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_ERROR_ERROR CHECK (ERROR IS NOT NULL )
    ,
    CONSTRAINT NN_ERROR_MENSAJE CHECK (MENSAJE IS NOT NULL )
);

CREATE TABLE BITACORA
(
    CODE INTEGER IDENTITY (1, 1)
    ,
    FECHA DATETIME DEFAULT GETDATE()
    ,
    CODIGO INTEGER
    ,
    MENSAJE NVARCHAR(200)
    ,
    USUARIO NVARCHAR(30)
    ,
    CONSTRAINT PK_BITACORA_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_BITACOTA_CODIGO CHECK (CODIGO IS NOT NULL )
    ,
    CONSTRAINT NN_BITACORA_MENSAJE CHECK (MENSAJE IS NOT NULL )
    ,
    CONSTRAINT NN_BITACORA_USUARIO CHECK (USUARIO IS NOT NULL )
);

CREATE TABLE TIPO_CONSECUTIVOS
(
    CODE INTEGER IDENTITY(1, 1)
    ,
    TIPO NVARCHAR(50)
    ,
    CONSTRAINT PK_TIPOCONSECUTIVO_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_TIPOCONSECUTIVO_TIPO CHECK(TIPO IS NOT NULL)
    ,
    CONSTRAINT UQ_TIPOCONSECUTIVO_TIPO UNIQUE(TIPO)
);

CREATE TABLE CONSECUTIVO
(
    CODE INTEGER IDENTITY (1, 1)
    ,
    TIPO INTEGER
    ,
    ID_CONSECUTIVO INTEGER
    ,
    POSEE_PREFIJO BIT DEFAULT 0
    ,
    PREFIJO NVARCHAR(5)
    ,
    NUM_CONSECUTIVO INTEGER
    ,
    CONSTRAINT PK_CONSECUTIVO_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_CONSECUTIVO_TIPO CHECK (TIPO IS NOT NULL )
    ,
    CONSTRAINT FK_CONSECUTIVO_TIPO FOREIGN KEY (TIPO) REFERENCES TIPO_CONSECUTIVOS(CODE)
    ,
    CONSTRAINT NN_CONSECUTIVO_ID CHECK(ID_CONSECUTIVO IS NOT NULL )
    ,
    CONSTRAINT UQ_CONSECUTIVO_ID UNIQUE(ID_CONSECUTIVO)
    ,
    CONSTRAINT UQ_CONSECUTIVO_PREFIJO UNIQUE (PREFIJO)
    ,
    CONSTRAINT UQ_CONSECUTIVO_DATOSDUPLICADOS UNIQUE(ID_CONSECUTIVO, NUM_CONSECUTIVO)
);

CREATE TABLE PREGUNTA
(
    CODE INTEGER IDENTITY(1, 1)
    ,
    PREGUNTA NVARCHAR(50)
    ,
    CONSTRAINT PK_PREGUNTA_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_PREGUNTA_PREGUNTA CHECK (PREGUNTA IS NOT NULL)
    ,
    CONSTRAINT UQ_PREGUNTA_PREGUNTA UNIQUE (PREGUNTA)
);

CREATE TABLE ADMINISTRADOR
(
    CODE INTEGER IDENTITY(1,1)
    ,
    USUARIO NVARCHAR(30) -- FIXME: AGREGAR CONSTRAINTS
    ,
    CLAVE NVARCHAR(30)
    ,
    PREGUNTA INTEGER
    ,
    RESPUESTA NVARCHAR(30)
    ,
    ACTIVO BIT DEFAULT 1
    ,
    CONSTRAINT PK_ADMINISTRADOR_CODE PRIMARY KEY(CODE)
    ,
    CONSTRAINT NN_ADMINISTRADOR_USUARIO CHECK (USUARIO IS NOT NULL )
    ,
    CONSTRAINT UQ_ADMINISTRADOR_USUARIO UNIQUE (USUARIO)
    ,
    CONSTRAINT NN_ADMINISTRADOR_CLAVE CHECK (CLAVE IS NOT NULL)
    ,
    CONSTRAINT NN_ADMINISTRADOR_PREGUNTA CHECK (PREGUNTA IS NOT NULL)
    ,
    CONSTRAINT FK_ADMINISTRADOR_PREGUNTA FOREIGN KEY (PREGUNTA) REFERENCES PREGUNTA (CODE)
    ,
    CONSTRAINT NN_ADMINISTRADOR_RESPUESTA CHECK (RESPUESTA IS NOT NULL )
);

/*
CREATE TABLE HISTORIAL_CLAVE
(
    CODE INTEGER IDENTITY (1,1)
    ,ADMINISTRADOR INTEGER
    ,CLAVE NVARCHAR(30)
    ,CONSTRAINT PK_HISTORIAL_CODE PRIMARY KEY (CODE)
    ,CONSTRAINT NN_HISTORIAL_ADMINISTRADOR CHECK (ADMINISTRADOR IS NOT NULL)
    ,CONSTRAINT NN_HISTORIAL_CLAVE CHECK (CLAVE IS NOT NULL)
    ,CONSTRAINT FK_HISTORIAL_ADMINISTRADOR FOREIGN KEY (ADMINISTRADOR) REFERENCES ADMINISTRADOR(CODE)
    ,CONSTRAINT UQ_HISTORIAL_CLAVEUSADA UNIQUE (ADMINISTRADOR, CLAVE)
);
 */

CREATE TABLE ROL
(
    CODE INTEGER IDENTITY(1,1)
    ,
    CUENTA INTEGER
    ,
    ADMINISTRADOR BIT DEFAULT 0
    ,
    SEGURIDAD BIT DEFAULT 0
    ,
    MANTENIMIENTO BIT DEFAULT 0
    ,
    CONSULTA BIT DEFAULT 0
    ,
    CONSTRAINT PK_ROL_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_ROL_CUENTA CHECK (CUENTA IS NOT NULL)
    ,
    CONSTRAINT FK_ROL_CUENTA FOREIGN KEY (CUENTA) REFERENCES ADMINISTRADOR(CODE)
);


CREATE TABLE TIPO_PAGO
(
    CODE INTEGER IDENTITY (1, 1)
    ,
    TIPO NVARCHAR(30)
    ,
    CONSTRAINT PK_TIPOPAGO_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_TIPOPAGO_TIPO CHECK (TIPO IS NOT NULL)
    ,
    CONSTRAINT UQ_TIPOPAGO_TIPO UNIQUE (TIPO)
);

-- Tipos de tarjetas: Visa, Mastercard, etc ...
CREATE TABLE TIPO_TARJETA
(
    CODE INTEGER IDENTITY(1,1)
    ,
    CODIGO NVARCHAR(11)
    ,
    TIPO NVARCHAR(30)
    ,
    CONSTRAINT PK_TIPOTARJETA_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_TIPOTARJETA_TIPO CHECK (TIPO IS NOT NULL)
    ,
    CONSTRAINT UQ_TIPOTARJETA_TIPO UNIQUE (TIPO)
);

-- Ente encargado de hacer el cobro mediante un tipo especifico de pago.
-- En caso de existir uno que sea de efectivo no se podrá crear ningún otro, a menos de que sea deshabilitado.
CREATE TABLE PROCESADOR_PAGO
(
    CODE INTEGER IDENTITY (1, 1)
    ,
    CODIGO NVARCHAR(11)
    ,
    PROCESADOR NVARCHAR(30)
    ,
    NOMBRE_DISPLAY NVARCHAR(30)
    ,
    TIPOPAGO INTEGER
    ,
    ESTADO BIT DEFAULT 1 -- 0 -> Desactivado | 1 -> Activado.
    ,
    CONSTRAINT PK_PROCESADORPAGO_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_PROCESADORPAGO_PROCESADOR CHECK (PROCESADOR IS NOT NULL)
    ,
    CONSTRAINT NN_PROCESADORPAGO_TIPOPAGO CHECK (TIPOPAGO IS NOT NULL )
    ,
    CONSTRAINT NN_PROCESADORPAGO_ESTADO CHECK (ESTADO IS NOT NULL )
    ,
    CONSTRAINT FK_PROCESADORPAGO_TIPOPAGO FOREIGN KEY (TIPOPAGO) REFERENCES TIPO_PAGO(CODE)
    ,
    CONSTRAINT UQ_PROCESADORPAGO_PROCESADOR UNIQUE (PROCESADOR)
);

CREATE TABLE TARJETA_PROCESADOR
(
    CODE INTEGER IDENTITY(1, 1)
    ,
    TIPO INTEGER
    ,
    PROCESADOR INTEGER
    ,
    CONSTRAINT PK_TARJETAPROCESADOR_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_TARJETAPROCESADOR_TIPO CHECK (TIPO IS NOT NULL )
    ,
    CONSTRAINT NN_TARJETAPROCESADOR_PROCESADOR CHECK (PROCESADOR  IS NOT NULL )
    ,
    CONSTRAINT FK_TARJETAPROCESADOR_TIPO FOREIGN KEY (TIPO) REFERENCES TIPO_TARJETA(CODE)
    ,
    CONSTRAINT FK_TARJETAPROCESADOR_PROCESADOR FOREIGN KEY (PROCESADOR) REFERENCES PROCESADOR_PAGO(CODE)
    ,
    CONSTRAINT UQ_TARJETAPROCESADOR_DATOSDUPLICADOS UNIQUE (TIPO, PROCESADOR)
);

-- Tipo de producto: Postres, combos, ensaladas, etc..
CREATE TABLE TIPO_LINEA
(
    CODE INTEGER IDENTITY (1, 1)
    ,
    CODIGO NVARCHAR(11)
    ,
    TIPO NVARCHAR(30)
    ,
    CONSTRAINT PK_TIPOLINEA_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_TIPOLINEA_TIPO CHECK (TIPO IS NOT NULL )
    ,
    CONSTRAINT UQ_TIPOLINEA_TIPO UNIQUE (TIPO)
);

--Indica el tipo de precio de un producto: agrandado, regular, pequeño...
CREATE TABLE TIPO_PRECIO
(
    CODE INTEGER IDENTITY (1, 1)
    ,
    CODIGO NVARCHAR(11)
    ,
    TIPO NVARCHAR(30)
    ,
    CONSTRAINT PK_TIPOPRECIO_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_TIPOPRECIO_TIPO CHECK (TIPO IS NOT NULL)
    ,
    CONSTRAINT UQ_TIPOPRECIO_TIPO UNIQUE (TIPO)
);

-- Contiene la informacion de un producto, PERO NO SUS PRECIOS
CREATE TABLE PRODUCTO
(
    CODE INTEGER IDENTITY (1, 1)
    ,
    CODIGO NVARCHAR(11)
    ,
    DESCRIPCION NVARCHAR(30)
    ,
    LINEA INTEGER
    ,
    CONTENIDO NVARCHAR(200)
    -- TODO: CREAR CAMPO PARA LA FOTO.
    ,
    CONSTRAINT PK_PRODUCTO_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_PRODUCTO_DESCRIPCION CHECK (DESCRIPCION IS NOT NULL )
    ,
    CONSTRAINT UQ_PRODUCTO_DESCRIPCION UNIQUE (DESCRIPCION)
    ,
    CONSTRAINT NN_PRODUCTO_LINEA CHECK (LINEA IS NOT NULL )
    ,
    CONSTRAINT NN_PRODUCTO_CONTENIDO CHECK (CONTENIDO IS NOT NULL )
    ,
    CONSTRAINT FK_PRODUCTO_LINEA FOREIGN KEY (LINEA) REFERENCES TIPO_LINEA (CODE)
);

-- Esta tabla contiene los precios de los productos y su tipo.
CREATE TABLE PRECIO
(
    CODE INTEGER IDENTITY (1, 1)
    ,
    TIPO INTEGER
    ,
    PRODUCTO INTEGER
    ,
    MONTO DECIMAL
    ,
    CONSTRAINT PK_PRECIO_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_PRECIO_TIPO CHECK (TIPO IS NOT NULL )
    ,
    CONSTRAINT NN_PRECIO_PRODUCTO CHECK (PRODUCTO IS NOT NULL )
    ,
    CONSTRAINT NN_PRECIO_MONTO CHECK (MONTO IS NOT NULL )
    ,
    CONSTRAINT UQ_PRECIO_DATOSDUPLICADOS UNIQUE (TIPO, PRODUCTO)
    ,
    CONSTRAINT FK_PRECIO_TIPO FOREIGN KEY (TIPO) REFERENCES TIPO_PRECIO(CODE)
    ,
    CONSTRAINT FK_PRECIO_PRODUCTO FOREIGN KEY (PRODUCTO) REFERENCES PRODUCTO(CODE)
);

CREATE TABLE DESCUENTO
(
    CODE INTEGER IDENTITY (1, 1)
    ,
    CODIGO NVARCHAR(6)
    ,
    DESCRIPCION NVARCHAR(50)
    ,
    DISPONIBLES INTEGER
    ,
    DESCUENTO INTEGER
    ,
    ESTADO BIT DEFAULT 1
    ,
    CONSTRAINT PK_DESCUENTO_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_DESCUENTO_CODIGO CHECK (CODIGO IS NOT NULL)
    ,
    CONSTRAINT NN_DESCUENTO_DESCRIPCION CHECK (DESCRIPCION IS NOT NULL )
    ,
    CONSTRAINT NN_DESCUENTO_DISPONIBLE CHECK (DISPONIBLES IS NOT NULL )
    ,
    CONSTRAINT NN_DESCUENTO_DESCUENTO CHECK (DESCUENTO IS NOT NULL)
    ,
    CONSTRAINT UQ_DESCUENTO_CODIGO UNIQUE(CODIGO)
    ,
    CONSTRAINT CH_DESCUENTO_DISPONIBLES CHECK (DISPONIBLES >= 0)
    ,
    CONSTRAINT CH_DESCUENTO_DESCUENTO CHECK (DESCUENTO > 0 AND DESCUENTO <= 100)
);

CREATE TABLE TIPO_ESTADO
(
    CODE INTEGER IDENTITY(1,1)
    ,
    TIPO NVARCHAR(30)
    ,
    CONSTRAINT PK_TIPOESTADO_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_TIPOESTADO_TIPO CHECK (TIPO IS NOT NULL)
    ,
    CONSTRAINT UQ_TIPOESTADO_TIPO UNIQUE(TIPO)
);

CREATE TABLE PEDIDO
(
    CODE INTEGER IDENTITY (1, 1)
    ,
    TRANSACCION NVARCHAR(18)
    ,
    PROCESADOR INTEGER
    ,
    TIPO_TARJETA INTEGER
    ,
    DESCUENTO INTEGER
    ,
    ESTADO INTEGER DEFAULT 1
    ,
    FECHA DATETIME DEFAULT GETDATE()
    ,
    CONSTRAINT PK_PEDIDO_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_PEDIDO_TRANSACCION CHECK (TRANSACCION IS NOT NULL)
    ,
    CONSTRAINT UQ_PEDIDO_TRANSACCION UNIQUE (TRANSACCION)
    ,
    CONSTRAINT FK_PEDIDO_DESCUENTO FOREIGN KEY (DESCUENTO) REFERENCES DESCUENTO (CODE)
    ,
    CONSTRAINT NN_PEDIDO_ESTADO CHECK(ESTADO IS NOT NULL)
    ,
    CONSTRAINT FK_PEDIDO_ESTADO FOREIGN KEY (ESTADO) REFERENCES TIPO_ESTADO(CODE)
    ,
    CONSTRAINT NN_PEDIDO_PROCESADOR CHECK (PROCESADOR IS NOT NULL)
    ,
    CONSTRAINT FK_PEDIDO_PROCESADOR FOREIGN KEY (PROCESADOR) REFERENCES PROCESADOR_PAGO (CODE)
    ,
    CONSTRAINT FK_PEDIDO_TIPOTARJETA FOREIGN KEY (TIPO_TARJETA) REFERENCES TIPO_TARJETA (CODE)
);

CREATE TABLE CARRITO
(
    CODE INTEGER IDENTITY (1, 1)
    ,
    PEDIDO INTEGER
    ,
    PRECIO INTEGER -- NO ES EL MONTO, ES EL ID EN LA TABLA PRECIO QUE REFERENCIA AL PRODUCTO.
    ,
    CANTIDAD INTEGER -- LA CANTIDAD DE VECES QUE PIDIO ESE PRODUCTO.
    ,
    CONSTRAINT PK_CARRITO_CODE PRIMARY KEY (CODE)
    ,
    CONSTRAINT NN_CARRITO_PEDIDO CHECK (PEDIDO IS NOT NULL )
    ,
    CONSTRAINT NN_CARRITO_PRECIO CHECK (PRECIO IS NOT NULL )
    ,
    CONSTRAINT NN_CARRITO_CANTIDAD CHECK (CANTIDAD IS NOT NULL )
    ,
    CONSTRAINT FK_CARRITO_PEDIDO FOREIGN KEY (PEDIDO) REFERENCES PEDIDO (CODE)
    ,
    CONSTRAINT FK_CARRITO_PRECIO FOREIGN KEY (PRECIO) REFERENCES PRECIO (CODE)
    ,
    CONSTRAINT CK_CARRITO_PRECIO CHECK (CANTIDAD > 0)
);

-- TODO: Crear lista de preguntas base.
INSERT
    INTO
        PREGUNTA
    (PREGUNTA)
VALUES
    (N'Nombre de su Escuela'), (N'Nombre de su mascota'), (N'Nombre de su Profesor'), (N'Nombre de su Novi@'), (N'Apodo Personal'), (N'Color Favorito'), (N'Pelicula Favorita'); 
GO

INSERT
    INTO
        TIPO_CONSECUTIVOS
    (TIPO)
VALUES
    (N'Tipos de Precio')
            ,
    (N'Lista de Tarjetas de Crédito o Débito')
            ,
    (N'Procesadores de Pago')
            ,
    (N'Líneas de Comidas')
            ,
    (N'Productos');
GO

INSERT
    INTO
        TIPO_PAGO
    (TIPO)
VALUES
    (N'EFECTIVO')
        ,
    (N'TARJETA CREDITO/DEBITO')
        ,
    (N'CHEQUE');
GO

INSERT
    INTO
        TIPO_ESTADO
    (TIPO)
VALUES
    (N'En curso'),
    (N'Procesada'),
    (N'Cancelada');
GO

/*
    PRUEBA
 */

/*
INSERT INTO TIPO_TARJETA (CODIGO, TIPO) VALUES (NULL, 'VISA');
INSERT INTO PROCESADOR_PAGO (CODIGO, PROCESADOR, TIPOPAGO) VALUES (NULL, 'DATAFONO #1', 2);
INSERT INTO TARJETA_PROCESADOR (TIPO, PROCESADOR) VALUES (1, 1);
INSERT INTO DESCUENTO (CODIGO, DESCRIPCION, DISPONIBLES, DESCUENTO) VALUES ('123456', 'TEST', 3, 20);
INSERT INTO PEDIDO (TRANSACCION, PROCESADOR, TIPO_TARJETA, DESCUENTO) VALUES ('QWERTYUIOP', 1, 1, NULL);
INSERT INTO PEDIDO (TRANSACCION, PROCESADOR, TIPO_TARJETA, DESCUENTO) VALUES ('POIUYTREWQ', 1, 1, 1);
INSERT INTO TIPO_LINEA (TIPO) VALUES ('COMBOS');
INSERT INTO PRODUCTO (CODIGO, DESCRIPCION, LINEA, CONTENIDO) VALUES (NULL, 'COMBO #1', 1, 'TEXTO...');
INSERT INTO PRODUCTO (CODIGO, DESCRIPCION, LINEA, CONTENIDO) VALUES ('01234567890', 'COMBO #2', 1, 'TEXTO...');
INSERT INTO TIPO_PRECIO (TIPO) VALUES ('REGULAR');
INSERT INTO PRECIO (TIPO, PRODUCTO, MONTO) VALUES (1, 1, 3500);
INSERT INTO CARRITO (PEDIDO, PRECIO, CANTIDAD) VALUES (1, 1, 3);
INSERT INTO CARRITO (PEDIDO, PRECIO, CANTIDAD) VALUES (1, 1, 2);
*/


/*
    UTILIDAD
 */

CREATE OR ALTER FUNCTION [dbo].[LOGIN]
(
    @USUARIO NVARCHAR(30)
    ,@CLAVE NVARCHAR(30)
)
RETURNS INT
AS
BEGIN
    DECLARE @RESULTADO INTEGER;
    IF EXISTS(SELECT USUARIO
    FROM dbo.V_ADMINISTRADORES_ACTIVOS
    WHERE USUARIO LIKE @USUARIO)
        BEGIN
        -- EXISTE EL USUARIO
        IF EXISTS(SELECT CODE
        FROM ADMINISTRADOR
        WHERE USUARIO LIKE @USUARIO AND CLAVE = @CLAVE)
                BEGIN
            -- CREDENCIALES VALIDAS
            SET @RESULTADO = 1;
        END
            ELSE
                BEGIN
            SET @RESULTADO = 0;
        -- EXECUTE dbo.INSERTA_ERROR 1, 'LOGIN', 'Credenciales incorrectas.';
        END
    END
    ELSE
        BEGIN
        -- NO EXISTE EL USUARIO
        SET @RESULTADO = -1;
    -- EXECUTE dbo.INSERTA_ERROR 2, 'LOGIN', 'Usuario no existe.';
    END
    RETURN @RESULTADO;
END
GO

CREATE OR ALTER FUNCTION [dbo].[COMPARACION_CLAVES]
(
    @USUARIO NVARCHAR(30)
    ,@CLAVE NVARCHAR(30)
)
RETURNS BIT
AS
    BEGIN
    DECLARE @RESULT BIT = 0;
    IF EXISTS(SELECT *
    FROM ADMINISTRADOR
    WHERE USUARIO LIKE @USUARIO AND CLAVE LIKE @CLAVE)
        BEGIN

        SET @RESULT = 1;
    end
    RETURN @RESULT;
end
GO

CREATE OR ALTER PROCEDURE dbo.ACTUALIZAR_CLAVE
    (
    @USUARIO NVARCHAR(30)
    ,
    @CLAVE NVARCHAR(30)
)
AS
BEGIN
    UPDATE
            ADMINISTRADOR
            SET CLAVE = @CLAVE
        WHERE
            USUARIO LIKE @USUARIO;
END
GO

CREATE OR ALTER FUNCTION dbo.RETORNA_CODIGO_CONSECUTIVO
(
    @TIPO INTEGER
)
RETURNS NVARCHAR(11)
AS
    BEGIN
    -- DECLARE @TIPO INTEGER = 1;
    DECLARE @PREFIJO NVARCHAR(5);
    DECLARE @NUMERO NVARCHAR(5);
    DECLARE @CODIGO VARCHAR(11);
    SELECT @PREFIJO = PREFIJO, @NUMERO = NUM_CONSECUTIVO
    FROM CONSECUTIVO
    WHERE TIPO = @TIPO;
    SET @CODIGO = CONCAT(LEFT(@PREFIJO, 5), '-', FORMAT(CAST(@NUMERO AS INTEGER ), '00000'));
    -- SELECT @CODIGO;
    RETURN @CODIGO;
end
GO

CREATE OR ALTER FUNCTION dbo.VALIDA_EMAIL
(
    @EMAIL NVARCHAR(50)
)
RETURNS BIT
AS
BEGIN
    DECLARE @RESULTADO BIT
    IF @EMAIL IS NOT NULL
             SET @EMAIL = LOWER(@EMAIL)
    SET @RESULTADO = 0
    IF @EMAIL like 'a-z,0-9,_,-%@a-z,0-9,_,-%.a-za-z%'
        AND @EMAIL NOT like '%@%@%'
        AND CHARINDEX('.@',@EMAIL) = 0
        AND CHARINDEX('..',@EMAIL) = 0
        AND CHARINDEX(',',@EMAIL) = 0
        AND RIGHT(@EMAIL,1) between 'a' AND 'z'
                  SET @RESULTADO=1
    RETURN @RESULTADO
END
GO

/*
    UTILIDAD
*/

/*
    EXISTE
 */
CREATE OR ALTER FUNCTION [dbo].[EXISTE_USUARIO]
(
    @USUARIO NVARCHAR(30)
)
RETURNS BIT
AS
    BEGIN
    DECLARE @RESULT BIT = 0;
    IF EXISTS(SELECT CODE
    FROM ADMINISTRADOR
    WHERE USUARIO LIKE @USUARIO)
        BEGIN
        SET @RESULT = 1;
    END
    RETURN @RESULT;
END
GO

CREATE OR ALTER FUNCTION [dbo].[EXISTE_CONSECUTIVO]
(
    @ID_CONSECUTIVO INTEGER
    ,@PREFIJO NVARCHAR(30)
)
    RETURNS BIT
AS
BEGIN
    DECLARE @RESULT BIT = 0;
    IF EXISTS(SELECT CODE
    FROM CONSECUTIVO
    WHERE ID_CONSECUTIVO LIKE @ID_CONSECUTIVO OR PREFIJO LIKE @PREFIJO)
        BEGIN
        SET @RESULT = 1;
    END
    RETURN @RESULT;
END
GO

CREATE OR ALTER FUNCTION dbo.EXISTE_DESCUENTO
(
    @CODIGO NVARCHAR(6)
)
RETURNS BIT
AS
    BEGIN
    DECLARE @RESULT INTEGER = 0;
    IF EXISTS(SELECT *
    FROM DESCUENTO
    WHERE CODIGO LIKE @CODIGO)
            BEGIN
        IF EXISTS(SELECT *
        FROM DESCUENTO
        WHERE CODIGO LIKE @CODIGO AND ESTADO = 1 AND DISPONIBLES > 0)
                    BEGIN
            SET @RESULT = 1;
        END
                ELSE
                    BEGIN
            SET @RESULT = 0;
        END
    END
    RETURN @RESULT;
END
GO

-- CLIENTE
CREATE OR ALTER FUNCTION dbo.EXISTE_TRANSACCION
(
    @TRANSACCION NVARCHAR(16)
)
RETURNS BIT
AS
    BEGIN
    DECLARE @RESULT BIT = 0;
    IF EXISTS(SELECT *
    FROM PEDIDO
    WHERE TRANSACCION = @TRANSACCION)
        BEGIN
        SET @RESULT = 1;
    END
    RETURN @RESULT;
END
GO

CREATE OR ALTER FUNCTION dbo.EXISTE_PRECIO
(
    @TIPO INT
    ,@PRODUCTO INT
)
RETURNS BIT
AS
    BEGIN
    DECLARE @RESULT BIT = 0;
    IF EXISTS(  SELECT
        *
    FROM
        PRECIO AS PRE
        INNER JOIN PRODUCTO P
        on PRE.PRODUCTO = P.CODE
    WHERE
                        PRE.TIPO = @TIPO
        AND P.CODE = @PRODUCTO)
        BEGIN
        SET @RESULT = 1;
    END
    RETURN @RESULT;
END
GO

CREATE OR ALTER FUNCTION dbo.EXISTE_PROCESADOR
(
    @PROCESADOR NVARCHAR(30)
)
RETURNS BIT
AS
    BEGIN
    DECLARE @RESULT BIT = 0;
    IF EXISTS(SELECT *
    FROM PROCESADOR_PAGO
    WHERE PROCESADOR LIKE @PROCESADOR)
        BEGIN
        SET @RESULT = 1;
    END
    RETURN @RESULT;
END
GO

CREATE OR ALTER FUNCTION dbo.EXISTE_PRODUCTO
(
    @DESCRIPCION NVARCHAR(30)
)
RETURNS BIT
AS
    BEGIN
    DECLARE @RESULT BIT = 0;
    IF EXISTS(SELECT *
    FROM PRODUCTO
    WHERE DESCRIPCION LIKE @DESCRIPCION)
        BEGIN
        SET @RESULT = 1;
    END
    RETURN @RESULT;
END
GO

CREATE OR ALTER FUNCTION dbo.EXISTE_TIPO_LINEA
(
    @TIPO NVARCHAR(30)
)
RETURNS BIT
AS
    BEGIN
    DECLARE @RESULT BIT = 0;
    IF EXISTS(SELECT TIPO
    FROM TIPO_LINEA
    WHERE TIPO LIKE @TIPO)
        BEGIN
        SET @RESULT = 1;
    END
    RETURN @RESULT;
END
GO

CREATE OR ALTER FUNCTION dbo.EXISTE_TIPO_PRECIO
(
    @TIPO NVARCHAR(30)
)
RETURNS BIT
AS
    BEGIN
    DECLARE @RESULT BIT = 0;
    IF EXISTS(SELECT TIPO
    FROM TIPO_PRECIO
    WHERE TIPO LIKE @TIPO)
        BEGIN
        SET @RESULT = 1;
    END
    RETURN @RESULT;
END
GO

CREATE OR ALTER FUNCTION dbo.EXISTE_TIPO_TARJETA
(
    @TIPO NVARCHAR(30)
)
RETURNS BIT
AS
    BEGIN
    DECLARE @RESULT BIT = 0;
    IF EXISTS(SELECT TIPO
    FROM TIPO_TARJETA
    WHERE TIPO LIKE @TIPO)
        BEGIN
        SET @RESULT = 1;
    END
    RETURN @RESULT;
END
GO

/*
    EXISTE
 */

/*
    INSERTA
 */

CREATE OR ALTER PROCEDURE dbo.REGISTRO
    (
    @USUARIO NVARCHAR(30)
    ,
    @CLAVE NVARCHAR(30)
    ,
    @PREGUNTA INTEGER
    ,
    @RESPUESTA NVARCHAR(30)
)
AS
BEGIN
    INSERT
        INTO
            ADMINISTRADOR
        (USUARIO, CLAVE, PREGUNTA, RESPUESTA)
    VALUES
        (@USUARIO, @CLAVE, @PREGUNTA, @RESPUESTA);
    INSERT
        INTO
            ROL
        (CUENTA)
    VALUES
        ((SELECT CODE
            FROM ADMINISTRADOR
            WHERE USUARIO LIKE @USUARIO));

    -- BITACORA:
    DECLARE @ACCION NVARCHAR(50);

    SET @ACCION = CONCAT('REGISTRO USUARIO - ', @USUARIO);
    EXECUTE dbo.INSERTA_BITACORA 1, @ACCION, @USUARIO;

    SET @ACCION = CONCAT('REGISTRO ROLES BASE DE - ', @USUARIO);
    EXECUTE dbo.INSERTA_BITACORA 2, @ACCION, @USUARIO;
END
GO

CREATE OR ALTER PROCEDURE dbo.INSERTA_BITACORA
    (
    @CODIGO INTEGER
    ,
    @MENSAJE NVARCHAR(200)
    ,
    @USUARIO NVARCHAR(30)
)
AS
BEGIN
    INSERT INTO BITACORA
        (CODIGO, MENSAJE, USUARIO)
    VALUES
        (@CODIGO, @MENSAJE, @USUARIO);
END
GO

-- Cliente
CREATE OR ALTER PROCEDURE dbo.INSERTA_CARRITO
    (
    @PEDIDO INTEGER
    ,
    @PRECIO INTEGER
    ,
    @CANTIDAD INTEGER
)
AS
BEGIN
    INSERT INTO CARRITO
        (PEDIDO, PRECIO, CANTIDAD)
    VALUES
        (@PEDIDO, @PRECIO, @CANTIDAD);
end
GO

CREATE OR ALTER PROCEDURE dbo.INSERTA_CONSECUTIVO
    (
    @TIPO INTEGER
    ,
    @ID_CONSECUTIVO INTEGER
    ,
    @POSEE_PREFIJO BIT
    ,
    @PREFIJO NVARCHAR(5)
)
AS
BEGIN
    IF (@POSEE_PREFIJO = 0)
            BEGIN
        INSERT
                    INTO
                        CONSECUTIVO
            (TIPO, ID_CONSECUTIVO, POSEE_PREFIJO, PREFIJO, NUM_CONSECUTIVO)
        VALUES
            (@TIPO, @ID_CONSECUTIVO, @POSEE_PREFIJO, NULL, 1);
    END
        ELSE
            BEGIN
        INSERT
                    INTO
                        CONSECUTIVO
            (TIPO, ID_CONSECUTIVO, POSEE_PREFIJO, PREFIJO, NUM_CONSECUTIVO)
        VALUES
            (@TIPO, @ID_CONSECUTIVO, @POSEE_PREFIJO, @PREFIJO, 1);
    END
end
GO

CREATE OR ALTER PROCEDURE dbo.INSERTA_DESCUENTO
    (
    @CODIGO NVARCHAR(6)
    ,
    @DESCRIPCION NVARCHAR(50)
    ,
    @DISPONIBLES INT
    ,
    @DESCUENTO INT
)
AS
BEGIN
    BEGIN
        INSERT INTO DESCUENTO
            (CODIGO, DESCRIPCION, DISPONIBLES, DESCUENTO)
        VALUES
            (@CODIGO, @DESCRIPCION, @DISPONIBLES, @DESCUENTO);
    end
end
GO

CREATE OR ALTER PROCEDURE dbo.INSERTA_ERROR
    (
    @CODIGO INTEGER
    ,
    @METODO NVARCHAR(30)
    ,
    @MENSAJE NVARCHAR(170)
)
AS
BEGIN
    INSERT INTO ERROR
        (ERROR, MENSAJE)
    VALUES
        (@CODIGO, CONCAT('METODO: ', @METODO, ' , MENSAJE: ', @MENSAJE));
END
GO

-- Cliente
CREATE OR ALTER PROCEDURE dbo.INSERTA_PEDIDO
    (
    @TRANSACCION NVARCHAR(16)
    ,
    @DESCUENTO INTEGER
    ,
    @PROCESADOR INTEGER
    ,
    @TIPO_TARJETA INTEGER
)
AS
BEGIN
    INSERT INTO PEDIDO
        (TRANSACCION, PROCESADOR, TIPO_TARJETA, DESCUENTO)
    VALUES
        (@TRANSACCION, @PROCESADOR, @TIPO_TARJETA, @DESCUENTO);
end
GO

CREATE OR ALTER PROCEDURE dbo.INSERTA_PRECIO
    (
    @TIPO INTEGER
    ,
    @PRODUCTO INTEGER
    ,
    @MONTO DECIMAL(8,2)
)
AS
BEGIN
    INSERT INTO PRECIO
        (TIPO, PRODUCTO, MONTO)
    VALUES
        (@TIPO, @PRODUCTO, @MONTO);
end
GO

CREATE OR ALTER PROCEDURE dbo.INSERTA_PROCESADOR_PAGO
    (
    @PROCESADOR NVARCHAR(30)
    ,
    @NOMBRE_DISPLAY NVARCHAR(30)
    ,
    @TIPOPAGO INTEGER
    ,
    @ESTADO BIT
)
AS
BEGIN
    IF EXISTS(SELECT *
    FROM CONSECUTIVO
    WHERE TIPO = 3)
            BEGIN
        DECLARE @CODIGO NVARCHAR(11);
        SET @CODIGO = dbo.RETORNA_CODIGO_CONSECUTIVO(3);

        -- INSERT PROCESADOR 
        INSERT
                    INTO PROCESADOR_PAGO
            (CODIGO, PROCESADOR, NOMBRE_DISPLAY, TIPOPAGO, ESTADO)
        VALUES
            (@CODIGO, @PROCESADOR, @NOMBRE_DISPLAY, @TIPOPAGO, @ESTADO);

        -- UPDATE CONSECUTIVO
        UPDATE
                    CONSECUTIVO
                        SET NUM_CONSECUTIVO = NUM_CONSECUTIVO + 1
                    WHERE
                        TIPO = 3;
    END
        ELSE
            BEGIN
        INSERT
                    INTO PROCESADOR_PAGO
            (CODIGO, PROCESADOR, NOMBRE_DISPLAY, TIPOPAGO, ESTADO)
        VALUES
            (CODIGO, @PROCESADOR, @NOMBRE_DISPLAY, @TIPOPAGO, @ESTADO);
    end
end
GO

CREATE OR ALTER PROCEDURE dbo.INSERTA_PRODUCTO
    (
    @DESCRIPCION NVARCHAR(30)
    ,
    @LINEA INTEGER
    ,
    @CONTENIDO NVARCHAR(200)
)
AS
BEGIN
    IF EXISTS(SELECT *
    FROM CONSECUTIVO
    WHERE TIPO = 5)
            BEGIN
        DECLARE @CODIGO NVARCHAR(11);
        SET @CODIGO = dbo.RETORNA_CODIGO_CONSECUTIVO(5);

        -- INSERT PRODUCTO
        INSERT
                    INTO PRODUCTO
            (CODIGO, DESCRIPCION, LINEA, CONTENIDO)
        VALUES
            (@CODIGO, @DESCRIPCION, @LINEA, @CONTENIDO);

        -- UPDATE CONSECUTIVO
        UPDATE
                    CONSECUTIVO
                        SET NUM_CONSECUTIVO = NUM_CONSECUTIVO + 1
                    WHERE
                        TIPO = 5;
    END
        ELSE
            BEGIN
        INSERT
                    INTO PRODUCTO
            (CODIGO, DESCRIPCION, LINEA, CONTENIDO)
        VALUES
            (NULL, @DESCRIPCION, @LINEA, @CONTENIDO);
    end
end
GO

CREATE OR ALTER PROCEDURE dbo.INSERTA_TARJETA_PROCESADOR
    (
    @TIPO INTEGER
    ,
    @PROCESADOR INTEGER
)
AS
BEGIN
    INSERT INTO TARJETA_PROCESADOR
        (TIPO, PROCESADOR)
    VALUES
        (@TIPO, @PROCESADOR);
end
GO

CREATE OR ALTER PROCEDURE dbo.INSERTA_TIPO_LINEA
    (
    @TIPO NVARCHAR(30)
)
AS
BEGIN
    IF EXISTS(SELECT *
    FROM CONSECUTIVO
    WHERE TIPO = 4)
            BEGIN
        DECLARE @CODIGO NVARCHAR(11);
        SET @CODIGO = dbo.RETORNA_CODIGO_CONSECUTIVO(4);

        -- INSERT PRODUCTO
        INSERT
                    INTO TIPO_LINEA
            (CODIGO, TIPO)
        VALUES
            (@CODIGO, @TIPO);

        -- UPDATE CONSECUTIVO
        UPDATE
                    CONSECUTIVO
                        SET NUM_CONSECUTIVO = NUM_CONSECUTIVO + 1
                    WHERE
                        TIPO = 4;
    END
        ELSE
            BEGIN
        INSERT
                    INTO TIPO_LINEA
            (CODIGO, TIPO)
        VALUES
            (NULL, @TIPO);
    end
end
GO

CREATE OR ALTER PROCEDURE dbo.INSERTA_TIPO_PRECIO
    (
    @TIPO NVARCHAR(30)
)
AS
BEGIN
    IF EXISTS(SELECT *
    FROM CONSECUTIVO
    WHERE TIPO = 1)
            BEGIN
        DECLARE @CODIGO NVARCHAR(11);
        SET @CODIGO = dbo.RETORNA_CODIGO_CONSECUTIVO(1);

        -- INSERT PRODUCTO
        INSERT
                    INTO TIPO_PRECIO
            (CODIGO, TIPO)
        VALUES
            (@CODIGO, @TIPO);

        -- UPDATE CONSECUTIVO
        UPDATE
                    CONSECUTIVO
                        SET NUM_CONSECUTIVO = NUM_CONSECUTIVO + 1
                    WHERE
                        TIPO = 1;
    END
        ELSE
            BEGIN
        INSERT
                    INTO TIPO_PRECIO
            (CODIGO, TIPO)
        VALUES
            (NULL, @TIPO);
    end
end
GO

CREATE OR ALTER PROCEDURE dbo.INSERTA_TIPO_TARJETA
    (
    @TIPO NVARCHAR(30)
)
AS
BEGIN
    IF EXISTS(SELECT *
    FROM CONSECUTIVO
    WHERE TIPO = 2)
            BEGIN
        DECLARE @CODIGO NVARCHAR(11);
        SET @CODIGO = dbo.RETORNA_CODIGO_CONSECUTIVO(2);

        -- INSERT PRODUCTO
        INSERT
                    INTO TIPO_TARJETA
            (CODIGO, TIPO)
        VALUES
            (@CODIGO, @TIPO);

        -- UPDATE CONSECUTIVO
        UPDATE
                    CONSECUTIVO
                        SET NUM_CONSECUTIVO = NUM_CONSECUTIVO + 1
                    WHERE
                        TIPO = 2;
    END
        ELSE
            BEGIN
        INSERT
                    INTO TIPO_TARJETA
            (CODIGO, TIPO)
        VALUES
            (NULL, @TIPO);
    end
end
GO

/*
    INSERTA
 */

/*
    MODIFICA
*/

CREATE OR ALTER PROCEDURE dbo.ACTUALIZA_ESTADO_ADMINISTRADOR
    (
    @USUARIO NVARCHAR(30)
    ,
    @ESTADO BIT
)
AS
BEGIN
    UPDATE ADMINISTRADOR SET ACTIVO = @ESTADO WHERE USUARIO LIKE @USUARIO;
end
GO

CREATE OR ALTER PROCEDURE dbo.MODIFICA_CONSECUTIVO
    (
    @CODE INTEGER
    ,
    @TIPO INTEGER
    ,
    @POSEE_PREFIJO BIT
    ,
    @PREFIJO NVARCHAR(5)
)
AS
BEGIN
    UPDATE 
            CONSECUTIVO
            SET TIPO = @TIPO
                ,POSEE_PREFIJO = @POSEE_PREFIJO
                ,PREFIJO = @PREFIJO
            WHERE
                CODE = @CODE;
END
GO


CREATE OR ALTER  PROCEDURE dbo.MODIFICA_DESCUENTO
    (
    @CODE INTEGER
    ,
    @DESCRIPCION NVARCHAR(50)
    ,
    @DISPONIBLES INTEGER
)
AS
BEGIN
    UPDATE 
            DESCUENTO
            SET DISPONIBLES = @DISPONIBLES
              ,DESCRIPCION = @DESCRIPCION
        WHERE CODE = @CODE;
end
GO


CREATE OR ALTER PROCEDURE dbo.MODIFICA_ESTADO_PEDIDO
    (
    @CODE INTEGER
    ,
    @ESTADO INTEGER
)
AS
BEGIN
    UPDATE PEDIDO SET ESTADO = @ESTADO WHERE CODE = @CODE;
end
GO

CREATE OR ALTER PROCEDURE dbo.MODIFICA_PRECIO
    (
    @PRODUCTO INTEGER
    ,
    @TIPO INTEGER
    ,
    @MONTO DECIMAL(8,2)
)
AS
BEGIN
    UPDATE
            PRECIO
            SET MONTO = @MONTO
            WHERE PRODUCTO = @PRODUCTO
        AND TIPO = @TIPO;
end
GO

CREATE OR ALTER PROCEDURE dbo.MODIFICA_PROCESADOR
    (
    @CODE INTEGER
    ,
    @PROCESADOR NVARCHAR(30)
    ,
    @NOMBRE_DISPLAY NVARCHAR(30)
    ,
    @ESTADO BIT
)
AS
BEGIN
    UPDATE
            PROCESADOR_PAGO
                SET
                    PROCESADOR = @PROCESADOR
                    ,ESTADO = @ESTADO
                    ,NOMBRE_DISPLAY = @NOMBRE_DISPLAY
                WHERE
                    CODE = @CODE;
end
GO

CREATE OR ALTER PROCEDURE dbo.MODIFICA_PRODUCTO
    (
    @CODE INTEGER
    ,
    @DESCRIPCION NVARCHAR(30)
    ,
    @LINEA INTEGER
    ,
    @CONTENIDO NVARCHAR(200)
)
AS
BEGIN
    UPDATE
            PRODUCTO
                SET
                    DESCRIPCION = @DESCRIPCION
                    ,LINEA = @LINEA
                    ,CONTENIDO = @CONTENIDO
                WHERE
                    CODE = @CODE;
end
GO

CREATE OR ALTER PROCEDURE dbo.MODIFICA_ROL_ADMINISTRADOR
    (
    @USUARIO NVARCHAR(30)
    ,
    @ADMINISTRADOR BIT
    ,
    @SEGURIDAD BIT
    ,
    @MANTENIMIENTO BIT
    ,
    @CONSULTA BIT
)
AS
BEGIN
    UPDATE
            R
            SET
               R.ADMINISTRADOR = @ADMINISTRADOR
                ,R.SEGURIDAD = @SEGURIDAD
                ,R.MANTENIMIENTO = @MANTENIMIENTO
                ,R.CONSULTA = @CONSULTA
            FROM
        ROL AS R
        INNER JOIN ADMINISTRADOR A
        on R.CUENTA = A.CODE
            WHERE
                A.USUARIO LIKE @USUARIO;
end
GO

CREATE OR ALTER PROCEDURE dbo.MODIFICA_TIPO_LINEA
    (
    @CODE INTEGER
    ,
    @TIPO NVARCHAR(30)
)
AS
BEGIN
    UPDATE TIPO_LINEA SET TIPO = @TIPO WHERE CODE = @CODE;
end
GO

CREATE OR ALTER PROCEDURE dbo.MODIFICA_TIPO_PRECIO
    (
    @CODE INTEGER
    ,
    @TIPO NVARCHAR(30)
)
AS
BEGIN
    UPDATE TIPO_PRECIO SET TIPO = @TIPO WHERE CODE = @CODE;
end
GO

CREATE OR ALTER PROCEDURE dbo.MODIFICA_TIPO_TARJETA
    (
    @CODE INTEGER
    ,
    @TIPO NVARCHAR(30)
)
AS
BEGIN
    UPDATE TIPO_TARJETA SET TIPO = @TIPO WHERE CODE = @CODE;
end
GO

/*
    MODIFICA
 */

/*
    ELIMINA
 */


CREATE OR ALTER PROCEDURE dbo.ELIMINAR_CONSECUTIVO
    (
    @CODE INTEGER
)
AS
BEGIN
    DELETE
        FROM
            CONSECUTIVO
        WHERE 
            CODE = @CODE;
END
GO

CREATE OR ALTER PROCEDURE dbo.ELIMINA_PRECIO
    (
    @PRODUCTO INTEGER
    ,
    @TIPO INTEGER
)
AS
BEGIN
    DELETE
            FROM
                PRECIO
            WHERE
                PRODUCTO = @PRODUCTO
        AND TIPO = @TIPO;
end
GO

CREATE OR ALTER PROCEDURE dbo.ELIMINA_PROCESADOR
    (
    @CODE INTEGER
)
AS
BEGIN
    DELETE
            FROM
                 TARJETA_PROCESADOR
            WHERE
                PROCESADOR = @CODE;

    DELETE
            FROM
                 PROCESADOR_PAGO
            WHERE
                CODE = @CODE;
end
GO

CREATE OR ALTER PROCEDURE dbo.DESHABILITA_DESCUENTO
    (
    @CODE INTEGER
)
AS
BEGIN
    UPDATE DESCUENTO SET ESTADO = 0 WHERE CODE = @CODE;
end
GO


CREATE OR ALTER PROCEDURE dbo.ELIMINA_PRODUCTO
    (
    @CODE INTEGER
)
AS
BEGIN
    DELETE FROM PRECIO WHERE PRODUCTO = @CODE;
    DELETE FROM PRODUCTO WHERE CODE = @CODE;
end
GO

CREATE OR ALTER PROCEDURE dbo.ELIMINA_TARJETA_PROCESADOR
    (
    @TARJETA INTEGER
    ,
    @PROCESADOR INTEGER
)
AS
BEGIN
    DELETE
            FROM
                 TARJETA_PROCESADOR
            WHERE
                TIPO = @TARJETA
        AND PROCESADOR = @PROCESADOR;
end
GO

CREATE OR ALTER PROCEDURE dbo.ELIMINA_TIPO_LINEA
    (
    @CODE INTEGER
)
AS
BEGIN
    DELETE FROM PRECIO WHERE PRODUCTO = @CODE;
    DELETE FROM PRODUCTO WHERE LINEA = @CODE;
    DELETE FROM TIPO_LINEA WHERE CODE = @CODE;
end
GO

CREATE OR ALTER PROCEDURE dbo.ELIMINA_TIPO_PRECIO
    (
    @CODE INTEGER
)
AS
BEGIN
    DELETE FROM TIPO_PRECIO WHERE CODE = @CODE;
end
GO

CREATE OR ALTER PROCEDURE dbo.ELIMINA_TIPO_TARJETA
    (
    @CODE INTEGER
)
AS
BEGIN
    DELETE FROM TIPO_TARJETA WHERE CODE = @CODE;
end
GO

/*
    ELIMINA
 */


/*
    RETORNA
 */

CREATE OR ALTER FUNCTION dbo.RETORNA_ESTADO_ADMINISTRADOR
(
    @CODE INTEGER
)
    RETURNS TABLE
        AS
        RETURN
        SELECT CODE, USUARIO, ACTIVO
        FROM ADMINISTRADOR
        WHERE CODE LIKE @CODE;
GO

CREATE OR ALTER FUNCTION dbo.RETORNA_CARRITOS_DE_PEDIDO
(
    @PEDIDO INTEGER
)
RETURNS TABLE
RETURN
    SELECT
    C.CODE AS CODE
        , PD.TRANSACCION AS TRANSACCION
        , PR.MONTO AS MONTO
        , C.CANTIDAD AS CANTIDAD
FROM CARRITO AS C
    INNER JOIN PRECIO AS PR
    ON(C.PRECIO = PR.CODE)
    INNER JOIN PEDIDO AS PD
    ON(C.PEDIDO = PD.CODE)
WHERE PEDIDO = @PEDIDO;
GO

CREATE OR ALTER FUNCTION dbo.RETORNA_CONSECUTIVO
(
    @CODE INTEGER
)
RETURNS TABLE
    RETURN
        SELECT
    *
FROM CONSECUTIVO
WHERE CODE = @CODE;
GO

CREATE OR ALTER FUNCTION dbo.RETORNA_DESCUENTO
(
    @CODE INTEGER
)
RETURNS TABLE
    RETURN
        SELECT *
FROM DESCUENTO
WHERE CODE = @CODE;
GO

CREATE OR ALTER FUNCTION dbo.RETORNA_PRECIO
(
    @CODE INTEGER
)
RETURNS TABLE
    RETURN
        SELECT
    *
FROM PRECIO
WHERE CODE = @CODE;
GO

CREATE OR ALTER FUNCTION dbo.RETORNA_PROCESADOR
(
    @CODE INTEGER
)
RETURNS TABLE
    RETURN
        SELECT *
FROM PROCESADOR_PAGO
WHERE CODE = @CODE;
GO

CREATE OR ALTER FUNCTION dbo.RETORNA_PRODUCTO
(
    @CODE INTEGER
)
RETURNS TABLE
    RETURN
        SELECT *
FROM PRODUCTO
WHERE CODE = @CODE;
GO

CREATE OR ALTER FUNCTION dbo.RETORNA_ROL_ADMINISTRADOR
(
    @USUARIO NVARCHAR(30)
)
RETURNS TABLE
AS
RETURN
    SELECT
        A.USUARIO
        , R.ADMINISTRADOR
        , R.SEGURIDAD
        , R.MANTENIMIENTO
        , R.CONSULTA
FROM
    ADMINISTRADOR AS A
    INNER JOIN ROL R on A.CODE = R.CUENTA
WHERE
          A.USUARIO LIKE @USUARIO;
GO

CREATE OR ALTER FUNCTION dbo.RETORNA_TIPO_LINEA
(
    @CODE INTEGER
)
RETURNS TABLE
    RETURN
        SELECT *
FROM TIPO_LINEA
WHERE CODE = @CODE;
GO

CREATE OR ALTER FUNCTION dbo.RETORNA_TIPO_TARJETA
(
    @CODE INTEGER
)
RETURNS TABLE
    RETURN
        SELECT CODE, TIPO
FROM TIPO_TARJETA
WHERE CODE = @CODE;
GO

CREATE OR ALTER FUNCTION dbo.RETORNA_TIPO_PRECIO
(
    @CODE INTEGER
)
    RETURNS TABLE
        RETURN
        SELECT *
        FROM TIPO_PRECIO
        WHERE CODE = @CODE;
GO

/*
    RETORNA
 */

/*
    CONSULTAS
 */

CREATE OR ALTER VIEW [dbo].[V_ADMINISTRADORES]
AS
    SELECT CODE, USUARIO
    FROM ADMINISTRADOR;
GO

CREATE OR ALTER VIEW [dbo].[V_ADMINISTRADORES_ACTIVOS]
AS
    SELECT CODE, USUARIO
    FROM ADMINISTRADOR
    WHERE ACTIVO = 1;
GO

CREATE OR ALTER VIEW dbo.V_BITACORA
AS
    SELECT CODE, FECHA, CODIGO, MENSAJE, USUARIO
    FROM BITACORA;
GO

CREATE OR ALTER VIEW dbo.V_CONSECUTIVO
AS
    SELECT
        C.CODE
        , TC.TIPO
        , C.ID_CONSECUTIVO
    FROM
        CONSECUTIVO AS C
        INNER JOIN TIPO_CONSECUTIVOS TC on C.TIPO = TC.CODE;
GO

CREATE OR ALTER VIEW dbo.V_TIPO_CONSECUTIVOS
AS
    SELECT CODE, TIPO
    FROM TIPO_CONSECUTIVOS;
GO

CREATE OR ALTER VIEW dbo.V_DESCUENTOS
AS
    SELECT CODE, CODIGO, DESCRIPCION, DESCUENTO, DISPONIBLES
    FROM DESCUENTO
    WHERE ESTADO = 1;
GO

CREATE OR ALTER VIEW dbo.V_ERRORES
AS
    SELECT CODE, ERROR, MENSAJE, FECHA
    FROM ERROR;
GO

CREATE OR ALTER VIEW dbo.V_PEDIDOS
AS
    SELECT
        PE.CODE
     , PE.TRANSACCION
     , TE.TIPO
     , PE.FECHA
     , SUM(P.MONTO * C.CANTIDAD)                                             AS [PRECIO BRUTO]
     , (IIF(PE.DESCUENTO IS NOT NULL, CONCAT(D.DESCUENTO, '%'), 'NO POSEE')) AS [DESCUENTO PORCENTAJE]
     , (IIF(PE.DESCUENTO IS NOT NULL, (CAST(SUM(P.MONTO * C.CANTIDAD) * (D.DESCUENTO / 100.0) AS DECIMAL(8, 2))),
           -1))                                                     AS [DESCUENTO MONTO]
     , (IIF(PE.DESCUENTO IS NOT NULL, SUM(P.MONTO * C.CANTIDAD) - SUM(P.MONTO * C.CANTIDAD) * (D.DESCUENTO / 100.0),
           SUM(P.MONTO * C.CANTIDAD)))                                      AS TOTAL
    FROM
        PEDIDO AS PE
        INNER JOIN TIPO_ESTADO TE ON PE.ESTADO = TE.CODE
        INNER JOIN CARRITO C on PE.CODE = C.PEDIDO
        LEFT OUTER JOIN DESCUENTO D on PE.DESCUENTO = D.CODE
        INNER JOIN PRECIO P on C.PRECIO = P.CODE
    GROUP BY
    PE.CODE, PE.TRANSACCION, TE.TIPO, PE.FECHA, CONCAT(D.DESCUENTO, '%'), D.DESCUENTO, PE.DESCUENTO;
GO

CREATE OR ALTER FUNCTION dbo.V_PRECIOS_DE_PRODUCTO
(
    @PRODUCTO INTEGER
)
RETURNS TABLE
    RETURN
        SELECT
    PRC.CODE
            , TP.TIPO
            , PRC.MONTO
FROM
    PRECIO AS PRC
    INNER JOIN PRODUCTO P
    on PRC.PRODUCTO = P.CODE
    INNER JOIN TIPO_PRECIO TP
    on PRC.TIPO = TP.CODE;
GO

CREATE OR ALTER VIEW dbo.V_PREGUNTAS
AS
    SELECT CODE, PREGUNTA
    FROM PREGUNTA;
GO

CREATE OR ALTER VIEW dbo.V_PROCESADOR
AS
    SELECT
        PP.CODE
        , (CASE WHEN PP.CODIGO IS NULL THEN CAST(PP.CODE AS NVARCHAR(11)) ELSE CAST(PP.CODIGO AS NVARCHAR(11)) END) AS CODIGO
        , PP.PROCESADOR
        , TP.TIPO
        , PP.ESTADO
    FROM
        PROCESADOR_PAGO AS PP
        INNER JOIN TIPO_PAGO TP
        on PP.TIPOPAGO = TP.CODE;
GO


CREATE OR ALTER FUNCTION dbo.V_PRODUCTOS_POR_TIPOLINEA
(
    @TIPO_LINEA INTEGER
)
RETURNS TABLE
    RETURN
        SELECT
    CODE
            , (CASE WHEN CODIGO IS NULL THEN CAST(CODE AS NVARCHAR(11)) ELSE CAST(CODIGO AS NVARCHAR(11)) END) AS CODIGO
            , DESCRIPCION
FROM
    PRODUCTO
WHERE
            LINEA = @TIPO_LINEA;
GO

CREATE OR ALTER VIEW dbo.V_TIPO_ESTADO
AS
    SELECT CODE, TIPO
    FROM TIPO_ESTADO;
GO

CREATE OR ALTER VIEW dbo.V_TIPO_LINEA
AS
    SELECT
        CODE
        , (CASE WHEN CODIGO IS NULL THEN CAST(CODE AS NVARCHAR(11)) ELSE CAST(CODIGO AS NVARCHAR(11)) END) AS CODIGO
        , TIPO
    FROM TIPO_LINEA;
GO

CREATE OR ALTER VIEW dbo.V_TIPO_PAGO
AS
    SELECT CODE, TIPO
    FROM TIPO_PAGO;
GO

CREATE OR ALTER VIEW dbo.V_TIPO_PRECIO
AS
    SELECT
        CODE
        , (CASE WHEN CODIGO IS NULL THEN CAST(CODE AS NVARCHAR(11)) ELSE CAST(CODIGO AS NVARCHAR(11)) END) AS CODIGO
        , TIPO
    FROM TIPO_PRECIO;
GO

CREATE OR ALTER VIEW dbo.V_TIPO_TARJETAS
AS
    SELECT
        CODE
        , (CASE WHEN CODIGO IS NULL THEN CAST(CODE AS NVARCHAR(11)) ELSE CAST(CODIGO AS NVARCHAR(11)) END) AS CODIGO
        , TIPO
    FROM
        TIPO_TARJETA;
GO

CREATE OR ALTER VIEW dbo.V_TIPO_TARJETAS_SIN_USAR
AS
    SELECT
        TT.CODE
        , TT.TIPO
    FROM
        TIPO_TARJETA AS TT
        LEFT OUTER JOIN TARJETA_PROCESADOR TP
        ON TT.CODE = TP.TIPO
    WHERE
        TP.CODE IS NULL;
GO

/*
    CONSULTAS
 */

