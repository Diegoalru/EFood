/*
 BASE DE DATOS PARA EFOOD-CLIENTE

 @AUTOR DIEGO ALONSO RUBI SALAS
 @DATE 20200613
 */

/*
USE MASTER;
GO

IF EXISTS(SELECT NAME FROM sys.databases WHERE NAME LIKE N'EFoodCliente')
BEGIN
    EXEC msdb.dbo.sp_delete_database_backuphistory @database_name = N'EFoodCliente';
    ALTER DATABASE EFoodCliente SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE EFoodCliente;
END
GO

IF NOT EXISTS(SELECT NAME FROM sys.databases WHERE NAME LIKE N'EFoodCliente')
BEGIN
    CREATE DATABASE EFoodCliente COLLATE Modern_Spanish_BIN2;
END
GO

USE EFoodCliente;
GO
 */

DROP TABLE IF EXISTS TARJETA;
DROP TABLE IF EXISTS CHEQUE;
DROP TABLE IF EXISTS CLIENTE;
DROP TABLE IF EXISTS TRANSACCION;
DROP TABLE IF EXISTS ERROR;

CREATE TABLE TRANSACCION
(
    CODE INTEGER IDENTITY(1, 1)
    ,ID_TRANSACCION VARCHAR(16)
    ,ESTADO INTEGER
    ,FECHA DATETIME DEFAULT GETDATE()
    ,CONSTRAINT PK_TRANSACCION_CODE PRIMARY KEY (CODE)
    ,CONSTRAINT NN_TRANSACCION_ID CHECK (ID_TRANSACCION IS NOT NULL )
    ,CONSTRAINT UQ_TRANSACCION_ID UNIQUE (ID_TRANSACCION)
    ,CONSTRAINT NN_TRANSACCION_ESTADO CHECK (ESTADO IS NOT NULL )
);

CREATE TABLE CLIENTE
(
    CODE INTEGER IDENTITY(1, 1)
    ,NOMBRE NVARCHAR(32)
    ,APELLIDOS NVARCHAR(64)
    ,DIRECCION NVARCHAR(255)
    ,TELEFONO VARCHAR(8)
    ,DESCUENTO INTEGER
    ,TRANSACCION VARCHAR(16)
    ,CONSTRAINT PK_CLIENTE_CODE PRIMARY KEY (CODE)
    ,CONSTRAINT NN_CLIENTE_NOMBRE CHECK (NOMBRE IS NOT NULL )
    ,CONSTRAINT NN_CLIENTE_APELLIDOS CHECK (APELLIDOS IS NOT NULL)
    ,CONSTRAINT NN_CLIENTE_DIRECCION CHECK (DIRECCION IS NOT NULL )
    ,CONSTRAINT NN_CLIENTE_TELEFONO CHECK (TELEFONO IS NOT NULL )
    ,CONSTRAINT CH_CLIENTE_TELEFONO CHECK (LEN(TELEFONO) = 8)
    ,CONSTRAINT CK_CLIENTE_DESCUENTO CHECK (DESCUENTO > 0)
    ,CONSTRAINT NN_CLIENTE_TRANSACCION CHECK (TRANSACCION IS NOT NULL )
    ,CONSTRAINT FK_CLIENTE_TRANSACCION FOREIGN KEY (TRANSACCION) REFERENCES TRANSACCION(ID_TRANSACCION)
    ,CONSTRAINT UQ_CLIENTE_TRANSACCION UNIQUE (TRANSACCION)
);

CREATE TABLE CHEQUE
(
    CODE INTEGER IDENTITY(1, 1)
    ,NUMERO VARCHAR(8)
    ,CUENTA VARCHAR(10)
    ,MONTO DECIMAL(8, 2)
    ,TRANSACCION VARCHAR(16)
    ,CONSTRAINT PK_CHEQUE_CODE PRIMARY KEY (CODE)
    ,CONSTRAINT NN_CHEQUE_TRANSACCION CHECK (TRANSACCION IS NOT NULL )
    ,CONSTRAINT FK_CHEQUE_TRANSACCION FOREIGN KEY (TRANSACCION) REFERENCES  TRANSACCION (ID_TRANSACCION)
    ,CONSTRAINT NN_CHEQUE_NUMERO CHECK (NUMERO IS NOT NULL )
    ,CONSTRAINT NN_CHEQUE_CUENTA CHECK (CUENTA IS NOT NULL )
    ,CONSTRAINT UQ_CHEQUE_CHEQUEUSADO UNIQUE (NUMERO, CUENTA)
    ,CONSTRAINT NN_CHEQUE_MONTO CHECK (MONTO IS NOT NULL)
    ,CONSTRAINT CK_CHEQUE_MONTOINCORRECTO CHECK (MONTO > 0)
);

CREATE TABLE TARJETA
(
    CODE INTEGER IDENTITY (1, 1)
    ,NOMBRE_ASOCIADO VARCHAR(30)
    ,TARJETA VARCHAR(16)
    ,MES CHAR(2)
    ,YEAR CHAR(4)
    ,CVV CHAR(3)
    ,TIPO INTEGER
    ,MONTO DECIMAL(8, 2)
    ,TRANSACCION VARCHAR(16)
    ,CONSTRAINT PK_TARJETA_CODE PRIMARY KEY (CODE)
    ,CONSTRAINT NN_TARJETA_TRANSACCION CHECK (TRANSACCION IS NOT NULL )
    ,CONSTRAINT FK_TARJETA_TRANSACCION FOREIGN KEY (TRANSACCION) REFERENCES TRANSACCION(ID_TRANSACCION)
    ,CONSTRAINT NN_TARJETA_NOMBRE CHECK (NOMBRE_ASOCIADO IS NOT NULL )
    ,CONSTRAINT NN_TARJETA_TARJETA CHECK (TARJETA IS NOT NULL )
    ,CONSTRAINT CK_TARJETA_TARJETA CHECK (LEN(TARJETA) = 16)
    ,CONSTRAINT NN_TARJETA_MES CHECK (MES IS NOT NULL)
    ,CONSTRAINT CK_TARJETA_MES CHECK (LEN(MES) = 2)
    ,CONSTRAINT NN_TARJETA_YEAR CHECK (YEAR IS NOT NULL )
    ,CONSTRAINT CK_TARJETA_YEAR CHECK (LEN(YEAR) = 4)
    ,CONSTRAINT NN_TARJETA_CVV CHECK (CVV IS NOT NULL )
    ,CONSTRAINT NN_TARJETA_TIPO CHECK (TIPO IS NOT NULL )
    ,CONSTRAINT NN_TARJETA_MONTO CHECK (MONTO IS NOT NULL)
    ,CONSTRAINT CK_TARJETA_MONTOINCORRECTO CHECK (MONTO > 0)
);

CREATE TABLE ERROR
(
    CODE INTEGER IDENTITY (1, 1)
    ,FECHA DATETIME DEFAULT GETDATE()
    ,ERROR INTEGER
    ,MENSAJE NVARCHAR(200)
    ,CONSTRAINT PK_ERROR_CODE PRIMARY KEY (CODE)
    ,CONSTRAINT NN_ERROR_ERROR CHECK (ERROR IS NOT NULL )
    ,CONSTRAINT NN_ERROR_MENSAJE CHECK (MENSAJE IS NOT NULL )
);

USE [efoodcliente];
GO

CREATE OR ALTER PROCEDURE [dbo].[CREAR_TRANSACCION]
(
    @ID_TRANSACCION VARCHAR(16)
)
AS
    BEGIN
        INSERT INTO TRANSACCION (ID_TRANSACCION, ESTADO) VALUES (@ID_TRANSACCION, 0);
    END
GO

CREATE OR ALTER PROCEDURE [dbo].[ACTUALIZA_TRANSACCION]
(
    @ID_TRANSACCION VARCHAR(16)
    ,@ESTADO INTEGER
)
AS
    BEGIN
        UPDATE TRANSACCION SET ESTADO = @ESTADO WHERE ID_TRANSACCION = @ID_TRANSACCION;
    END
GO

CREATE OR ALTER FUNCTION [dbo].[EXISTE_TRANSACCION]
(
    @TRANSACCION VARCHAR(16)
)
RETURNS BIT
AS
    BEGIN
        DECLARE @RESULTADO BIT = 1;
        IF NOT EXISTS(SELECT * FROM TRANSACCION WHERE ID_TRANSACCION = @TRANSACCION)
        BEGIN
            SET @RESULTADO = 0;
        end
        RETURN @RESULTADO;
    end
GO

CREATE OR ALTER FUNCTION [dbo].[EXISTE_CHEQUE]
(
    @NUMERO VARCHAR(8)
    ,@CUENTA VARCHAR(10)
)
RETURNS BIT
AS
    BEGIN
        DECLARE @RESULTADO BIT = 1;
        IF NOT EXISTS(SELECT * FROM CHEQUE WHERE CUENTA LIKE UPPER(@CUENTA) AND NUMERO LIKE UPPER(@NUMERO))
        BEGIN
            SET @RESULTADO = 0;
        end
        RETURN @RESULTADO;
    end
GO

CREATE OR ALTER PROCEDURE [dbo].[INSERTA_CLIENTE]
(
    @NOMBRE NVARCHAR(32)
    ,@APELLIDOS NVARCHAR(64)
    ,@DIRECCION NVARCHAR(255)
    ,@TELEFONO VARCHAR(8)
    ,@DESCUENTO INTEGER
    ,@TRANSACCION VARCHAR(16)
)
AS
    BEGIN
        INSERT
            INTO
                CLIENTE
                (NOMBRE, APELLIDOS, DIRECCION, TELEFONO, DESCUENTO, TRANSACCION)
            VALUES
                (@NOMBRE, @APELLIDOS, @DIRECCION, @TELEFONO, @DESCUENTO, @TRANSACCION);
    END
GO

CREATE OR ALTER PROCEDURE [dbo].[INSERTA_TARJETA]
(
    @NOMBRE_ASOCIADO VARCHAR(30)
    ,@TARJETA VARCHAR(16)
    ,@MES CHAR(2)
    ,@YEAR CHAR(4)
    ,@CVV CHAR(3)
    ,@TIPO INTEGER
    ,@MONTO DECIMAL(8, 2)
    ,@TRANSACCION VARCHAR(16)
)
AS
    BEGIN
        INSERT
            INTO
                TARJETA
                (NOMBRE_ASOCIADO, TARJETA, MES, YEAR, CVV, TIPO, MONTO, TRANSACCION)
            VALUES
                (@NOMBRE_ASOCIADO, @TARJETA, @MES, @YEAR, @CVV, @TIPO, @MONTO, @TRANSACCION);
    END
GO

CREATE OR ALTER PROCEDURE [dbo].[INSERTA_CHEQUE]
(
    @NUMERO VARCHAR(8)
    ,@CUENTA VARCHAR(10)
    ,@MONTO DECIMAL(8, 2)
    ,@TRANSACCION VARCHAR(16)
)
AS
    BEGIN
        INSERT
            INTO
                CHEQUE
                (NUMERO, CUENTA, MONTO, TRANSACCION)
            VALUES
                (@NUMERO, @CUENTA, @MONTO, @TRANSACCION);
    END
GO

CREATE OR ALTER FUNCTION [dbo].[RETORNA_TRANSACCION]
(
    @ID_TRANSACCION VARCHAR(16)
)
RETURNS TABLE
AS
RETURN
SELECT CONCAT(C.NOMBRE, ' ', C.APELLIDOS) AS NOMBRE
     , C.DIRECCION
     , C.TELEFONO
     , (CASE WHEN TA.CODE IS NOT NULL THEN RIGHT(TA.TARJETA, 4) ELSE 'NO APLICA' END) AS TARJETA
     , (CASE WHEN CH.CODE IS NOT NULL THEN CH.NUMERO ELSE 'NO APLICA' END) AS [NUMERO CHEQUE]
     , (CASE WHEN CH.CODE IS NOT NULL THEN CH.CUENTA ELSE 'NO APLICA' END) AS [CUENTA CHEQUE]
FROM TRANSACCION AS T
         INNER JOIN CLIENTE C on T.CODE = C.TRANSACCION
         INNER JOIN CHEQUE CH on T.CODE = CH.TRANSACCION
         INNER JOIN TARJETA TA on T.CODE = TA.TRANSACCION
WHERE T.ID_TRANSACCION = @ID_TRANSACCION;
GO
